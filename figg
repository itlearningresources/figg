#!/usr/bin/ksh
Tmp="/tmp/$$"
TmpDir="/tmp/dir$$"
trap 'rm -f "$Tmp" >/dev/null 2>&1' 0
trap "exit 2" 1 2 3 13 15

if [ ! -a ~/.figg ]; then

      print "~/.figg does not exist"
      print "example .figg in git repo (you must modify it to suit your specifics)"

      print "example ~/.figg content"
      print "        FIGGHOME=/home/xxx/figg"
      print "        FIGGPROJECTSHOME=/home/xxx/figg/projects"
      print "        RUNHWIDTH=32"
      print "        QFIXWIDTH=12"
      print "        XLINTS=-Xlint:-deprecation -Xlint:-rawtypes"
      print "        JAVAPATH=/home/xxx/jdk-11.0.2/bin/java "
      print "        JAVACPATH=/home/xxx/jdk-11.0.2/bin/javac "



      exit 1
fi

FIGGHOME=`gawk -v        w=FIGGHOME -v v="" -F= '{gsub(/[;].*$/,"",$0);gsub(/[ ]*$/,"",$0);if ($1==w) {v=$2;exit;}}END{print v}' ~/.figg`
FIGGPROJECTSHOME=`gawk -v w=FIGGPROJECTSHOME -v v=""    -F= '{gsub(/[;].*$/,"",$0);gsub(/[ ]*$/,"",$0);if ($1==w) {v=$2;exit;}}END{print v}' ~/.figg`
JAVAPATH=`gawk  -v w=JAVAPATH  -v v=""    -F= '{gsub(/[;].*$/,"",$0);gsub(/[ ]*$/,"",$0);if ($1==w) {v=$2;exit;}}END{print v}' ~/.figg`
JAVACPATH=`gawk -v w=JAVACPATH -v v=""    -F= '{gsub(/[;].*$/,"",$0);gsub(/[ ]*$/,"",$0);if ($1==w) {v=$2;exit;}}END{print v}' ~/.figg`
XLINTS=`gawk    -v w=XLINTS    -v v=""    -F= '{gsub(/[;].*$/,"",$0);gsub(/[ ]*$/,"",$0);if ($1==w) {v=$2;exit;}}END{print v}' ~/.figg`
RUNHWIDTH=`gawk -v w=RUNHWIDTH -v v=88    -F= '{gsub(/[;].*$/,"",$0);gsub(/[ ]*$/,"",$0);if ($1==w) {v=$2;exit;}}END{print v}' ~/.figg`
QFIXWIDTH=`gawk -v w=QFIXWIDTH -v v=12    -F= '{gsub(/[;].*$/,"",$0);gsub(/[ ]*$/,"",$0);if ($1==w) {v=$2;exit;}}END{print v}' ~/.figg`

print "$XLINTS"

if [[ -z "${FIGGPROJECTSHOME}" ]]; then
      print "Environemnt variable \"FIGGPROJECTSHOME\" is undefined"
      exit 1
fi
if [[ -z "${FIGGHOME}" ]]; then
      print "Environemnt variable \"FIGGHOME\" is undefined"
      exit 1
fi


cd ${FIGGPROJECTSHOME}
TEMPLATE=$FIGGHOME/templates/Template.txt
QUICKCLASS=$FIGGHOME/templates/QuickClass.txt

templateinstance() {
     cat $TEMPLATE | gawk -v v=$JF '{sub("NNAME",v,$0);print $0;}' > $Tmp
}

confirm() {
     if [ "$FORCE" != "yes" ] ; then
          print    " Creating project \"$1\""
          print -n "   Enter '10111' to confirm >> "
          read STRIN
          if [ "$STRIN" != "10111" ] ; then
               print "   Exiting - No Match"
               exit 1
          fi
     fi
}
projectorgnodetails() {
     print -R "Project directory organization"   
     print -R "          <FIGGPROJECTSHOME>"
     print -R "          |--/templates"
     print -R "          |--/<PROJECT>"
     print -R "             |--/src"
     print -R "                |--/<class-name>.java"
     print -R "             |--/classes"
     print -R "             |--/lib"
     print -R "             |--/doc"
     print -R "             |--/lst"
     print -R "             |--/tmp"
     print ""   
}
projectorgdetail() {
     print -R "Project directory organization"   
     print -R "          $FIGGPROJECTSHOME"
     print -R "          |--/templates"
     print -R "          |--/$PJ"
     print -R "             |--/src"
     ls  $FIGGPROJECTSHOME/$PJ/src | gawk '{
           print "                |--/" $0
     }'
     print -R "             |--/classes"
     print -R "             |--/lib"
     print -R "             |--/doc"
     print -R "             |--/lst"
     print -R "             |--/tmp"
     print ""   
}
projectorg() {
     print -R "Project directory organization"   
     print -R "          $FIGGPROJECTSHOME"
     print -R "          |--/templates"
     print -R "          |--/$PJ"
     print -R "             |--/src"
     print -R "                |--/$JF.java"
     print -R "             |--/classes"
     print -R "             |--/lib"
     print -R "             |--/doc"
     print -R "             |--/lst"
     print -R "             |--/tmp"
     print ""   
}
assertproject() {
     mkdir -p $PJ/src
     mkdir -p $PJ/classes
     mkdir -p $PJ/lib
     mkdir -p $PJ/doc
     mkdir -p $PJ/lst
     mkdir -p $PJ/tmp
}
makeproject() {
     if [ ! -d "$PJ" ]; then
          confirm "$PJ"
          assertproject
          JF="Main"
          cat $TEMPLATE | gawk -v v=$JF '{sub("NNAME",v,$0);print $0;}' > $Tmp
          cp $Tmp $PJ/src/$JF.java
     fi
}
function cap {
    typeset -u f
    f=${1:0:1}
    printf "%s%s\n" "$f" "${1:1}"
}


PJ=`cat ~/.figglast | gawk 'BEGIN {FS="/"}{print $1}'`
if [[ "$PJ" = "" ]]; then
     PJ=Main
fi
JF=`cat ~/.figglast | gawk 'BEGIN {FS="/"}{print $2}'`
if [[ "$JF" = "" ]]; then
     JF=Main
fi

makeproject

# CPATH=$CPATH:lib/joda-time-2.8.1.jar
# CPATH=$CPATH:lib/commons-logging-1.1.3.jar 
CPATH=

#DOC
shorthelp() {
     print "(c)hange class <cls>, (n)ew class <cls>, (s)ave class <cls>, (t)quickclass with template, (tb) quickclass with no template"
}
figghelp() {
                   print "\n"
                   print "figg - a command line java development environment"
                   print "\n"
                   print "Usage:         figg [-i] [-p] [-l] [-h]"
                   print "         -i [<project-name>/]<class-name>        - enters interactive mode (i-mode)"
                   print "         -p <project-name>                       - select project (project folder)"
                   print "         -l                                      - list project folder"
                   print "         -h                                      - display usage"
                   print "Typical uses:  figg                                    - i-mode, project=., class-name == Main>"
                   print "         figg -i <c-name>                        - i-mode, project=., class-name=<c-name>"
                   print "         figg -i <p-name>/<c-name>               - i-mode, project=<p-name>, class-name=<c-name>"
                   print "         figg -p <p-name> -i <c-name>            - i-mode, project=<p-name>, class-name=<c-name>"
                   print "Interactive mode commands"
                   gawk -f $FIGGHOME/help.awk $FIGGHOME/figg | sort
                   print "\n"
}
helpdetail() {
                   figghelp
                   projectorgnodetails
                   print "\$FIGGHOME is $FIGGHOME"
                   print "Current source file is $PJ/src/$JF" 
                   print "Current command line classpath is" 
                   print $CPATH
                   javac -version
                   java -version
                   compile $JF 0
                   run 0 $JF
                   print "\n" 
}
help() {
                   figghelp
                   print "\n" 
}
resetmain() {
     JF="Main"
     cat $TEMPLATE | gawk -v v=$JF '{sub("NNAME",v,$0);print $0;}' > $Tmp
     cp $Tmp $PJ/src/$JF.java
}
newproject() {
     if [ ! -d "$PJ" ]; then
          makeproject
     else
          print "Error: Project $PJ already exists (reset to default project and class)"
          JF="Main"
          PJ="Main"
     fi
}
run() {
     assertproject
     print "$JAVAPATH -cp $PJ/classes:$CPATH -ea $2 $3 $4 $5 $6 $7" >&2
     if [[ $1 != "0" ]]; then
          $JAVAPATH -cp $PJ/classes:$CPATH -ea $2 $3 $4 $5 $6 $7
     fi
}
compile() {
     JF=$1
     assertproject
     print "$JAVACPATH $XLINTS -cp $PJ/classes:$CPATH -d $PJ/classes $PJ/src/$JF.java 2> $PJ/tmp/$JF.lst" >&2
     if [[ $2 -gt 0 ]]; then
          rm -f tmp/$JF.lst >/dev/null 2>&1
          $JAVACPATH $XLINTS   -cp $PJ/classes:$CPATH -d $PJ/classes $PJ/src/$JF.java 2> $PJ/tmp/$JF.lst
     fi
}

compileRun() {
     JF=$1
     assertproject
     print "$JAVACPATH $XLINTS -cp $PJ/classes:$CPATH -d $PJ/classes $PJ/src/$JF.java 2> $PJ/tmp/$JF.lst" >&2
     rm -f tmp/$JF.lst >/dev/null 2>&1
     $JAVACPATH $XLINTS   -cp $PJ/classes:$CPATH -d $PJ/classes $PJ/src/$JF.java 2> $PJ/tmp/$JF.lst
     if [[ $? -eq 0 ]]; then
          print "$JAVAPATH -cp $PJ/classes:$CPATH -ea $JF" >&2
          $JAVAPATH -cp $PJ/classes:$CPATH -ea $JF
     fi
}

compileRunList() {
     JF=$1
     assertproject
     rm -f $Tmp >/dev/null 2>&1
     date >> $Tmp 
     print "---------------------------------------------------------------------------------------------------------------------------------------" >> $Tmp 
     print "Source File: "$PJ/src/$JF.java >> $Tmp 
     print "---------------------------------------------------------------------------------------------------------------------------------------" >> $Tmp 
     cat $PJ/src/$JF.java >> $Tmp 
     print "Compile--------------------------------------------------------------------------------------------------------------------------------" >> $Tmp 
     print "$JAVACPATH $XLINTS -cp $PJ/classes:$CPATH -d $PJ/classes $PJ/src/$JF.java" >> $Tmp 
     rm -f tmp/$JF.lst >/dev/null 2>&1
     $JAVACPATH $XLINTS   -cp $PJ/classes:$CPATH -d $PJ/classes $PJ/src/$JF.java >> $Tmp 

     print "Run------------------------------------------------------------------------------------------------------------------------------------" >> $Tmp 
     if [[ $? -eq 0 ]]; then
          print "$JAVAPATH -cp $PJ/classes:$CPATH -ea $JF" >> $Tmp
          $JAVAPATH -cp $PJ/classes:$CPATH -ea $JF >> $Tmp 
     fi
}

compileDebug() {
               JF=$1
               assertproject
               compile $JF 1
               if [[ $? -ne 0 ]]; then
                         print "Listing"
                         # vi src/$JF.java $PJ/tmp/$JF.lst
                         # vim quickfix stuff
                         # :copen " Open the quickfix window
                         # :ccl   " Close it
                         # :cw    " Open it if there are "errors", close it otherwise (some people prefer this)
                         # :cn    " Go to the next error in the window
                         # :cnf   " Go to the first error in the next file
                         vim -c "cw" -c "resize $QFIXWIDTH" -c "map <F1> :cn<cr><cr>" -c "map <F2> :cp<cr><cr>" -q $PJ/tmp/$JF.lst
               else
                    print "Compile OK" >&2
               fi
}
showjfset() {
                print "A        : "$PJA"/"$JFA
                print "AA       : "$PJAA"/"$JFAA
                print "AAA      : "$PJAAA"/"$JFAAA
                print "AAAA     : "$PJAAAA"/"$JFAAAA
                print ""

}
#                           run 1 $JF $1 $2 $3 $4 $5 $6 ;;
Interactive() {
                PJA=`cat ~/.figgjfa | gawk 'BEGIN {FS="/"}{print $1}'`
                JFA=`cat ~/.figgjfa | gawk 'BEGIN {FS="/"}{print $2}'`
                PJAA=`cat ~/.figgjfaa | gawk 'BEGIN {FS="/"}{print $1}'`
                JFAA=`cat ~/.figgjfaa | gawk 'BEGIN {FS="/"}{print $2}'`
                PJAAA=`cat ~/.figgjfaaa | gawk 'BEGIN {FS="/"}{print $1}'`
                JFAAA=`cat ~/.figgjfaaa | gawk 'BEGIN {FS="/"}{print $2}'`
                PJAAAA=`cat ~/.figgjfaaaa | gawk 'BEGIN {FS="/"}{print $1}'`
                JFAAAA=`cat ~/.figgjfaaaa | gawk 'BEGIN {FS="/"}{print $2}'`
                while [[ "$cmd" != "q" ]]
                do
                     print "$PJ/$JF" > ~/.figglast
                     print -n "figg/$PJ/$JF >> ";read var;set -A arr $var;
                     DSTAMP=`date '+%F_%H%M%S' | sed 's/-//g'` 
                     cp $PJ/src/$JF.java "$FIGGHOME/archives/JF_${PJ}_${JF}_${DSTAMP}.java"
                     cp $PJ/src/$JF.java "$FIGGHOME/archives/JF_${DSTAMP}_${PJ}_${JF}.java"
                     rm `ls -t  $FIGGHOME/archives/JF_*_${PJ}_${JF}.java | gawk 'NR>16'` >/dev/null 2>&1
                     # ls -t JF*  | gawk 'NR<5'


                     abbrev=${arr[0]};
                     cmd=${arr[0]};
	             case $abbrev in
                                 nc)   cmd="n" ;;
                                 nb)   cmd="b" ;;
                                 sc)   cmd="c" ;;
                                 sp)   cmd="p" ;;
                               edit)   cmd="e" ;;
                              clear)   cmd="reset" ;;
	             esac
                     # CMDBEGIN:
	             case $cmd in
                       x)   cmd="q" ;;
                       tmp) # CMD: Copy $JF to /tmp/$JF
                            cp $PJ/src/$JF.java /tmp
                            ;;
                       e)   # CMD: edit (vim) <project-name>/src/<class-name>.java"
                            vim $PJ/src/$JF.java
                            ;;
                       et)  vim $FIGGHOME/templates/${arr[1]}.txt ;;
                       p)   if [ -d "./${arr[1]}" ]; then
                                 PJ=${arr[1]} 
                            else
                                 print "Error: Project ${arr[1]} does not exist"
                            fi ;;
                       a)   JF=$JFA
                            cat ~/.figgjfa
                            PJ=`cat ~/.figgjfa | gawk 'BEGIN {FS="/"}{print $1}'`
                            JF=`cat ~/.figgjfa | gawk 'BEGIN {FS="/"}{print $2}'`
                            ;;
                      aa)   JF=$JFAA ;;
                     aaa)   JF=$JFAAA ;;
                    aaaa)   JF=$JFAAAA ;;
                      ss)   showjfset ;;
                       s)   STRIN=${arr[1]}
                            if [ "$STRIN" = "a" ] ; then
                                JFA=$JF
                            fi
                            if [ "$STRIN" = "aa" ] ; then
                                JFAA=$JF
                            fi
                            if [ "$STRIN" = "aaa" ] ; then
                                JFAAA=$JF
                            fi
                            if [ "$STRIN" = "aaaa" ] ; then
                                JFAAAA=$JF
                            fi
                            print "$PJ/$JFA" > ~/.figgjfa
                            print "$PJ/$JFAA" > ~/.figgjfaa
                            print "$PJ/$JFAAA" > ~/.figgjfaaa
                            print "$PJ/$JFAAAA" > ~/.figgjfaaaa
                            print "A        : "$JFA
                            print "AA       : "$JFAA
                            print "AAA      : "$JFAAA
                            print "AAAA     : "$JFAAAA
                            print ""
                            ;;
                       c) # CMD: <class-name> Change the current class" 
                            SZ=`echo ${arr[1]} | gawk '{gsub(/[.]java$/,"",$0);print $0;}'`
                            SZ=`cap $SZ`
                            if [[ ! -z "${SZ}" ]]; then
                                 JF=$SZ
                            fi ;;
                       np) # CMD: <project-name> New project (project folder with sub folders)
                            PJ=${arr[1]}
                            if [[ ! -z "${PJ}" ]]; then
                                 newproject 
                                 ls $PJ 
                            fi ;;
                       sa)  # CMD: <class-name> Save as
                            SZ=`cap $SZ`
                            if [[ ! -z "$PJ/src/$SZ.java" ]]; then
                                 cp "$PJ/src/$JF.java" "$PJ/src/$SZ.java"
                                 JF=$SZ
                            else
                                 print "Error: $PJ/src/$SZ.java already exists"
                            fi
                            ;;
                       eq)  # CMD: Edit the QuickClass template
                            vim $QUICKCLASS
                            ;;
                       tb)  # CMD: Create QuickClass without using a template (blank QuickClass)
                            print "Initializing \"QuickClass\" Class"
                                      JF="QuickClass"
                                      rm -rf "$PJ/src/$JF.java" >/dev/null 2>&1
                                      touch $PJ/src/$JF.java
                                      vim $PJ/src/$JF.java
                            ;;
                       t) # CMD: Create QuickClass using QuickClass template
                            print "Initializing \"QuickClass\" Class"
                            echo "enter 'yes' to proceed?"
                            read  answer
                            case $answer in
                                 yes|Yes|YES|y)
                                      JF="QuickClass"
                                      rm -rf "$PJ/src/$JF.java" >/dev/null 2>&1
                                      cat $QUICKCLASS | gawk -v v=$JF '{sub("NNAME",v,$0);print $0;}' > $Tmp
                                      cp $Tmp $PJ/src/$JF.java
                                      vim $PJ/src/$JF.java
                            esac
                            ;;
#                    print "         sa <class-name>   - save as <project-name>/src/<class-name>.java"
#                    print "         p <project-name>  - change the current project"
                       n)   # CMD: <class-name> Create new file <project-name>/src/<class-name>.java
                            SZ=`echo ${arr[1]} | gawk '{gsub(/[.]java$/,"",$0);print $0;}'`
                            SZ=`cap $SZ`
                            if [[ ! -z "${SZ}" ]]; then
                                 JF=$SZ
                                 if [ ! -e "$PJ/src/$JF.java" ]; then
                                      cat $TEMPLATE | gawk -v v=$JF '{sub("NNAME",v,$0);print $0;}' > $Tmp
                                      cp $Tmp $PJ/src/$JF.java
                                      vim $PJ/src/$JF.java
                                 else
                                      print "Error: $PJ/src/$JF.java already exists"
                                      echo "enter 'yes' to proceed?"
                                      read  answer
                                      case $answer in
                                           yes|Yes|YES|y)
                                                echo "you indicated 'yes'"
                                                echo "new class created"
                                                cp $PJ/src/$JF.java $PJ/src/$JF.java.sav
                                                cat $TEMPLATE | gawk -v v=$JF '{sub("NNAME",v,$0);print $0;}' > $Tmp
                                                cp $Tmp $PJ/src/$JF.java
                                                vim $PJ/src/$JF.java
                                                ;;
                                           no|n|"")
                                                echo "you indicated 'no'"
                                                echo "nothing to change"
                                                ;;
                                           esac
                                 fi
                           fi ;;
                  delete)  SZ=`echo ${arr[1]} | gawk '{gsub(/[.]java$/,"",$0);print $0;}'`
                           SZ=`cap $SZ`
                           if [[ ! -z "${SZ}" ]]; then
                                      rm -i  $PJ/src/$SZ.java
                           fi ;;
                       b)  SZ=`echo ${arr[1]} | gawk '{gsub(/[.]java$/,"",$0);print $0;}'`
                           SZ=`cap $SZ`
                           if [[ ! -z "${SZ}" ]]; then
                                JF=$SZ
                                touch $Tmp $PJ/src/$JF.java
                                vim $PJ/src/$JF.java
                           fi ;;

                      cc)  # CMD: Compile <project-name>/src/<class-name>.java"
                           compileDebug $JF 1 ;;

                   .figg)  # CMD: Edit ~/.figg file
                           vi ~/.figg ;;

                     ccc)  javac -Xlint:unchecked $FIGGHOME"/projects/"$PJ"/src/"$JF".java" ;;

                       rr) # CMD: Compile and Run $JF
                           compileRun $JF 
                           ;;
                       g)  # CMD: Compile/run/create listing for <project-name>/classes/<class-name>"
                           compileRunList $JF 
                           cat $Tmp
                           cp $Tmp $PJ/lst/$JF.listing
                           ;;
                      gg)  # CMD: Display last listing for <project-name>/classes/<class-name>
                           cat $PJ/lst/$JF.listing
                           ;;
                       R)  # CMD: Run <project-name>/classes/<class-name>.class in split window
                           rm -f $Tmp >/dev/null 2>&1
                           run 1 $JF $1 $2 $3 $4 $5 $6 | tee $Tmp
                           vim -c "wincmd w | vert resize $RUNHWIDTH | wincmd w" -O $PJ/src/$JF.java $Tmp
                           ;;
                      rrr)  
                           $JAVAPATH -cp $PJ/classes:$CPATH 1 2 3
                           ;;
                       r)  # CMD: Run <project-name>/classes/<class-name>.class
                           STRIN=${arr[1]}
                           run 1 $JF $STRIN
                           ;;
                       j)  # CMD: Generate and display javadoc <project-name>/classes/<class-name>.java
                           mkdir -p $PJ/doc
                           rm -rf $PJ/doc/*          >/dev/null 2>&1
                           javadoc -d $PJ/doc $PJ/src/*.java
                           ls -lh "$PJ/doc/index.html"
                           xdg-open  "$PJ/doc/index.html" >/dev/null 2>&1
                           ;;
                       d)  # CMD: vim $JF.lst and $JF.java
                           vim -o $PJ/tmp/$JF.lst $PJ/src/$JF.java
                           ;;
                     cat)  # CMD: Cat <project-name>/src/<class-name>.java
                           cat $PJ/src/$JF.java
                           ;;
               resetmain)  resetmain ;;
                       y)  # CMD: Compile all project java files
                           print "Compile All"
                           for file in $PJ/src/*.java; do
                               SZ=`echo $file | gawk -F / '{gsub(/[.]java$/,"",$NF);gsub(/^src[/]/,"",$NF);print $NF;}'`
                                print $PJ
                                print $SZ
                                compile $SZ 1
                           done 
                           ;;
                       l)  # CMD: List project java files 
                           ls $PJ/src/*.java | sort | gawk '
                           {
                               n = split($0,a,"/")
                               if ( NR % 4 == 0) 
                                   printf("\n");
                               else
                                   printf("%s  ", a[n]);
                           }
                           ' | column -x 
                           ;;
                       tar)  # CMD: tar all of $FIGGHOME into $FIGGHOME/archives
                           DSTAMP=`date '+%Y-%m-%d_%H-%M-%S'` 
                           tar --exclude=$FIGGHOME/archives -cvf "$FIGGHOME/archives/figghome_${DSTAMP}.tar" $FIGGHOME         >/dev/null 2>&1
                           ls -lh "$FIGGHOME/archives/figghome_${DSTAMP}.tar"
                           ;;
                       archiveall) 
                           DSTAMP=`date '+%F_%H%M%S' | sed 's/-//g'` 
                           tar --exclude=$FIGGHOME/archives -cvf "$FIGGHOME/archives/figghome${DSTAMP}.tar" $FIGGHOME           >/dev/null 2>&1
                           gzip "$FIGGHOME/archives/figghome${DSTAMP}.tar"                                                      >/dev/null 2>&1
                           ls -lh "$FIGGHOME/archives/figghome${DSTAMP}.tar"

#                            ls -lh "$FIGGHOME/archives/figghome${DSTAMP}.tar.gz"
#                            uuencode "$FIGGHOME/archives/figghome${DSTAMP}.tar.gz"   \
#                                     "$FIGGHOME/archives/figghome${DSTAMP}.tar.gz" > \
#                                     "$FIGGHOME/archives/figghome${DSTAMP}.tar.gz.uu.txt"
#                            ls -lh "$FIGGHOME/archives/figghome${DSTAMP}.tar.gz.uu.txt"a
                           ;;
                       archive) 
                           DSTAMP=`date '+%F_%H%M%S' | sed 's/-//g'` 
                           tar -cvf "$FIGGHOME/archives/${PJ}__${DSTAMP}.tar" $PJ
                           ls -l $FIGGHOME/archives
                           ;;
                       archivels) 
                           ls -l $FIGGHOME/archives ;;
                       pls)  ls -l . ;;
                    ls) # CMD: Lists project classes
                           ls $PJ/src/*.java | gawk 'BEGIN{FS="/";}{print $NF}' | sed 's/[.].*$//g' | gawk '
                           BEGIN { i=0; n=0; }
                                 { a[i]=$0; i++; }
                           END   {n=i;t=int(n/3);print n " classes";for (i=0;i<t;i++) printf("%40s %40s %40s\n",a[i],a[i+t],a[i+(2*t)]); }'
                           ;;
                   lsc) # CMD: list project class files  
                           print ""
                           find $PJ/classes/ -type f | sort -r
                           print ""
                           # find $PJ/classes/ -type f | sed "s#^..##" | sort -r
#                          ls $PJ/classes/*.class | gawk 'BEGIN{FS="/";}{print $NF}' | sed 's/[.].*$//g' | gawk '
#                          BEGIN { i=0; n=0; }
#                                { a[i]=$0; i++; }
#                          END   {n=i;t=int(n/3);print n " classes";for (i=0;i<t;i++) printf("%40s %40s %40s\n",a[i],a[i+t],a[i+(2*t)]); }'
                         ;;
                       lsls) figg -p $PJ -l ;;
                       lsl)  ls -lt $PJ/src/*.java | gawk 'NR<9' ;;
                       lsa)  ls -lrt $PJ/src/*.java ;;

                       lss) # CMD: List the src directory for <project-name>
                            ls -l $PJ/src/${arr[1]}
                            ;;
                       lst) # CMD: List the templates directory
                            ls -l $FIGGHOME/templates
                            ;;

                       reset) # CMD: Delete all class for the current project
                           print    " Deleting all class files"
                           print -n " Enter '10111' to confirm >> "
                           read STRIN
                           if [ "$STRIN" != "10111" ] ; then
                                print ""
                           else
                                rm -rf $PJ/classes/*  >/dev/null 2>&1
                           fi
                           ;;
                       init) # CMD: Resets interactive mode (sets to Main/Main)
                           rm -rf  ~/.figglast  >/dev/null 2>&1
                           PJ=Main
                           JF=Main
                           ;;
                       h) # CMD: Help
                          help
                          ;;
                       ?) # CMD: Help
                          shorthelp
                          ;;
                       *) if [ -s src/$cmd.java ]
                          then
                               vim src/$cmd.java 
                          fi
                          ;;
	             esac
                done
                # CMDEND:
            }
NOARG="1"
while getopts "qhjp:i:lx" arg
do
        NOARG="0"
	case $arg in
            j) figghelp
               ;;
            h) help
               ;;
            p) PJ=$OPTARG
               ;;
            q)   
                PJ="Main"
                JF="QuickClass"
                if [ ! -e "$PJ/src/$JF.java" ]; then
                    cat $QUICKCLASS | gawk -v v=$JF '{sub("NNAME",v,$0);print $0;}' > $Tmp
                    cp $Tmp $PJ/src/$JF.java
                fi
                shift $(($OPTIND - 1))
                Interactive
                ;;  
            i)  
                # JF=$OPTARG 
                PJ=`echo $OPTARG | gawk -v out="." -F / '/[/]/{out=$1;} END{print out}'`
                JF=`echo $OPTARG | gawk -v out="." -F / '{ if ( $0 ~ /[/]/ ) print $2; else print $1;}'`
                JF=`cap $JF`
                if [ ! -e "$PJ/src/$JF.java" ]; then
                    print "Error: $PJ/src/$JF.java does not exist"
                    exit 1
                fi

                shift $(($OPTIND - 1))
                Interactive
               ;;
            l) 
               print "\n"
               print "Project: "$PJ
               print "=========================================="
               print "\n"
               print $PJ/src
               print "------------------------------------------"
               ls -l $PJ/src
               print "\n"
               print $PJ/classes
               print "------------------------------------------"
               ls -l $PJ/classes
               print "\n"
               date
               compile $JF 0
               run 0 $JF
               print "\n"
               ;;
	    *) exit 0 ;;
	esac
done

if [[ "$NOARG" = "1" ]]; then
     Interactive
fi
