#!/usr/bin/ksh
Tmp="/tmp/$$"
TmpDir="/tmp/dir$$"
trap 'rm -f "$Tmp" >/dev/null 2>&1' 0
trap "exit 2" 1 2 3 13 15
PJ=.
CPATH=classes
CPATH=$CPATH:lib/joda-time-2.8.1.jar
CPATH=$CPATH:lib/commons-logging-1.1.3.jar 
CPATH=
JAVAPATH=java 
JAVAPATH=/home/mestes/jdk-11.0.2/bin/java 
JAVACPATH=javac 
JAVACPATH=/home/mestes/jdk-11.0.2/bin/javac 
XLINTS="-Xlint:-deprecation -Xlint:-rawtypes"
RUNHWIDTH=`gawk -v w=RUNHWIDTH -v v=88 -F= '{gsub(/[;].*$/,"",$0);gsub(/[ ]*$/,"",$0);if ($1==w) {v=$2;exit;}}END{print v}' .figg`
QFIXWIDTH=`gawk -v w=QFIXWIDTH -v v=12 -F= '{gsub(/[;].*$/,"",$0);gsub(/[ ]*$/,"",$0);if ($1==w) {v=$2;exit;}}END{print v}' .figg`
help() {
                          print "\n"
                          print "Usage: figg [-i] [-p] [-h]"
                          print "       -i <class name>   - Enters interactive mode"
                          print "       -p <project name> - Designate project (project folder)"
                          print "       -h  display usage\n"
                          print "       Interactive mode commands"
                          print "          f <class name>    - change the current source file" 
                          print "          n <class name>    - create new file <project name>/src/<class name>.java"
                          print "          e                 - edit (vim) <project name>/src/<class name>.java"
                          print "          cat               - cat <project name>/src/<class name>.java"
                          print "          ls                - ls <project name>/src"
                          print "          c                 - compile <project name>/src/<class name>.java"
                          print "          r                 - run <project name>/classes/<class name>.class"
                          print "          R                 - run <project name>/classes/<class name>.class in split window"
                          print "          j                 - generate and display javadoc <project name>/classes/<class name>.java"
                          print "\n"
                          print "          q                 - Quit" 
                          print "          h                 - Help\n" 
                          print "Current source file is $PJ/src/$JF" 
                          print "Current command line classpath is" 
                          print $CPATH
                          javac -version
                          java -version
                          compile $JF 0
                          run 0 $JF
                          print "\n" 
}
run() {
               print "$JAVAPATH -cp $PJ/classes:$CPATH -ea $2 $3 $4 $5 $6 $7" >&2
               if [[ $1 != "0" ]]; then
                      $JAVAPATH -cp $PJ/classes:$CPATH -ea $2 $3 $4 $5 $6 $7
               fi
}
compile() {
               JF=$1
               print "$JAVACPATH $XLINTS -cp $PJ/classes:$CPATH -d $PJ/classes $PJ/src/$JF.java 2> tmp/$JF.lst" >&2
               if [[ $2 -gt 0 ]]; then
                    rm -f tmp/$JF.lst >/dev/null 2>&1
                    $JAVACPATH $XLINTS   -cp $PJ/classes:$CPATH -d $PJ/classes $PJ/src/$JF.java 2> tmp/$JF.lst
               fi
}
compileDebug() {
               JF=$1
               compile $JF 1
               if [[ $? -ne 0 ]]; then
                         print "Listing"
                         cp tmp/$JF.lst last.lst 
                         # vi src/$JF.java tmp/$JF.lst
                         # vim quickfix stuff
                         # :copen " Open the quickfix window
                         # :ccl   " Close it
                         # :cw    " Open it if there are "errors", close it otherwise (some people prefer this)
                         # :cn    " Go to the next error in the window
                         # :cnf   " Go to the first error in the next file
                         vim -c "cw" -c "resize $QFIXWIDTH" -c "map <F1> :cn<cr><cr>" -c "map <F2> :cp<cr><cr>" -q tmp/$JF.lst
               else
                    print "Compile OK" >&2
               fi
}
Interactive() {
                while [[ "$cmd" != "q" ]]
                do
                     print -n "figg/$PJ/$JF >> ";read var;set -A arr $var;
                     cmd=${arr[0]};
	             case $cmd  in
                       x) cmd="q" ;;
                       p) PJ=${arr[1]} ;;
                       cd) PJ=${arr[1]} ;;
                       f) JF=${arr[1]} ;;
                       cat) cat $PJ/src/$JF.java ;;
                       v) vim ~/.vimrc ;;
                       ff) vim figg ;;

                       n) JF=${arr[1]}
                          figg -n $JF ;;
                       b) JF=${arr[1]}
                          figg -b $JF ;;
                       e) figg -p $PJ -e $JF ;;
                       a) figg -a $JF ;;
                       c) figg -p $PJ -c $JF ;;
                       r) figg -p $PJ -r $JF $1 $2 $3 $4 $5 $6;;
                       R) figg -p $PJ -R $JF $1 $2 $3 $4 $5 $6;;
                       j) figg -p $PJ -j $JF ;;

                       t) figg -t $JF ;;
                       d) figg -d $JF ;;
                       y) figg -y ;;
                       l) figg -l ;;
                       pls) ls -l . ;;
                       ls) figg -p $PJ -l ;;
                       reset)
                           rm -f $PJ/classes/*.class  >/dev/null 2>&1
                           ;;
                       h) help
                          ;;
                       *) if [ -s src/$cmd.java ]
                          then
                               vim src/$cmd.java 
                          fi
                          ;;
	             esac
                done
}
NOARG="1"
while getopts "p:b:t:n:d:c:r:R:a:e:i:lxvj:" arg
do
        NOARG="0"
	case $arg in
            p) PJ=$OPTARG
               ;;
            i)  
                # JF=$OPTARG 
                PJ=`echo $OPTARG | gawk -v out="." -F / '/[/]/{out=$1;} END{print out}'`
                JF=`echo $OPTARG | gawk -v out="." -F / '{ if ( $0 ~ /[/]/ ) print $2; else print $1;}'`
                # JF=`echo $OPTARG | gawk '{gsub(/[.]java$/,"",$0);print $0;}'`
                if [ ! -e "$PJ/src/$JF.java" ]; then
                    print "Error: $PJ/src/$JF.java does not exist"
                    exit 1
                fi

                shift $(($OPTIND - 1))
                Interactive

               ;;
            c) compileDebug $OPTARG 1 
               ;;
            n) JF=`echo $OPTARG | gawk '{gsub(/[.]java$/,"",$0);print $0;}'`
               shift $(($OPTIND - 1))
               if [ ! -e "$PJ/src/$JF.java" ]; then
                    cat src/Template.txt | gawk -v v=$JF '{sub("NNAME",v,$0);print $0;}' > $Tmp
                    cp $Tmp $PJ/src/$JF.java
                    vim $PJ/src/$JF.java
               else
                    print "Error: $PJ/src/$JF.java already exists"
               fi
               ;;
            b) JF=`echo $OPTARG | gawk '{gsub(/[.]java$/,"",$0);print $0;}'`
               shift $(($OPTIND - 1))
               if [ ! -e "src/$JF.java" ]; then
                    touch $Tmp $PJ/src/$JF.java
                    vim $PJ/src/$JF.java
               else
                    print "Error: $PJ/src/$JF.java already exists"
               fi
               ;;
            d) JF=$OPTARG 
               shift $(($OPTIND - 1))
               vim -o tmp/$JF.lst $PJ/src/$JF.java
               ;;
            y) 
               print "Compile All"
               for file in src/*.java; do
                   JF=`echo $file | gawk '{gsub(/[.]java$/,"",$0);gsub(/^src[/]/,"",$0);print $0;}'`
                   print $JF
                   compile $JF 1
                done 
               ;;
            R) JF=$OPTARG 
               shift $(($OPTIND - 1))
               rm -f $Tmp >/dev/null 2>&1
               run 1 $JF $1 $2 $3 $4 $5 $6 | tee $Tmp
               vim -c "wincmd w | vert resize $RUNHWIDTH | wincmd w" -O $PJ/src/$JF.java $Tmp
               ;;
            r) JF=$OPTARG 
               shift $(($OPTIND - 1))
               run 1 $JF $1 $2 $3 $4 $5 $6
               ;;
            a) JF=$OPTARG 
               shift $(($OPTIND - 1))
               compile $JF 1
               ;;
            e) JF=$OPTARG 
               vim $PJ/src/$JF.java
               ;;
            l) 
               print "\n"
               print "Project: "$PJ
               print "=========================================="
               print "\n"
               print $PJ/src
               print "------------------------------------------"
               ls -l $PJ/src
               print "\n"
               print $PJ/classes
               print "------------------------------------------"
               ls -l $PJ/classes
               print "\n"
               date
               compile $JF 0
               run 0 $JF
               print "\n"
               ;;
            j) 
               JF=$OPTARG 
               rm -rf $PJ/doc/index.html >/dev/null 2>&1
               javadoc -d doc $PJ/src/$JF.java
               xdg-open  "$PJ/doc/index.html" >/dev/null 2>&1
               ;;
            v) java  -version
               ;;
	    *) exit 0 ;;
	esac
done

if [[ "$NOARG" = "1" ]]; then
     Interactive
fi
