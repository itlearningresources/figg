#!/usr/bin/ksh
Tmp="/tmp/$$"
TmpDir="/tmp/dir$$"
trap 'rm -f "$Tmp" >/dev/null 2>&1' 0
trap "exit 2" 1 2 3 13 15

if [ ! -a ~/.figg ]; then

      print "~/.figg does not exist"
      print "example .figg in git repo (you must modify it to suit your specifics)"
      exit 1
fi

FIGGHOME=`gawk -v        w=FIGGHOME -v v="" -F= '{gsub(/[;].*$/,"",$0);gsub(/[ ]*$/,"",$0);if ($1==w) {v=$2;exit;}}END{print v}' ~/.figg`
FIGGPROJECTSHOME=`gawk -v w=FIGGPROJECTSHOME -v v=""    -F= '{gsub(/[;].*$/,"",$0);gsub(/[ ]*$/,"",$0);if ($1==w) {v=$2;exit;}}END{print v}' ~/.figg`
JAVAPATH=`gawk  -v w=JAVAPATH  -v v=""    -F= '{gsub(/[;].*$/,"",$0);gsub(/[ ]*$/,"",$0);if ($1==w) {v=$2;exit;}}END{print v}' ~/.figg`
JAVACPATH=`gawk -v w=JAVACPATH -v v=""    -F= '{gsub(/[;].*$/,"",$0);gsub(/[ ]*$/,"",$0);if ($1==w) {v=$2;exit;}}END{print v}' ~/.figg`
XLINTS=`gawk    -v w=XLINTS    -v v=""    -F= '{gsub(/[;].*$/,"",$0);gsub(/[ ]*$/,"",$0);if ($1==w) {v=$2;exit;}}END{print v}' ~/.figg`
RUNHWIDTH=`gawk -v w=RUNHWIDTH -v v=88    -F= '{gsub(/[;].*$/,"",$0);gsub(/[ ]*$/,"",$0);if ($1==w) {v=$2;exit;}}END{print v}' ~/.figg`
QFIXWIDTH=`gawk -v w=QFIXWIDTH -v v=12    -F= '{gsub(/[;].*$/,"",$0);gsub(/[ ]*$/,"",$0);if ($1==w) {v=$2;exit;}}END{print v}' ~/.figg`


if [[ -z "${FIGGPROJECTSHOME}" ]]; then
      print "Environemnt variable \"FIGGPROJECTSHOME\" is undefined"
      exit 1
fi
if [[ -z "${FIGGHOME}" ]]; then
      print "Environemnt variable \"FIGGHOME\" is undefined"
      exit 1
fi


cd ${FIGGPROJECTSHOME}
TEMPLATE=$FIGGHOME/templates/Template.txt

confirm() {
     if [ "$FORCE" != "yes" ] ; then
          print    " Creating project \"$1\""
          print -n "   Enter '10111' to confirm >> "
          read STRIN
          if [ "$STRIN" != "10111" ] ; then
               print "   Exiting - No Match"
               exit 1
          fi
     fi
}
projectorgnodetails() {
     print -R "Project directory organization"   
     print -R "          <FIGGPROJECTSHOME>"
     print -R "          |--/<PROJECT>"
     print -R "             |--/src"
     print -R "                |--/<SourceFile>.java"
     print -R "             |--/classes"
     print -R "             |--/lib"
     print -R "             |--/doc"
     print -R "             |--/tmp"
     print ""   
}
projectorgdetail() {
     print -R "Project directory organization"   
     print -R "          $FIGGPROJECTSHOME"
     print -R "          |--/$PJ"
     print -R "             |--/src"
     ls  $FIGGPROJECTSHOME/$PJ/src | gawk '{
           print "                |--/" $0
     }'
     print -R "             |--/classes"
     print -R "             |--/lib"
     print -R "             |--/doc"
     print -R "             |--/tmp"
     print ""   
}
projectorg() {
     print -R "Project directory organization"   
     print -R "          $FIGGPROJECTSHOME"
     print -R "          |--/$PJ"
     print -R "             |--/src"
     print -R "                |--/$JF.java"
     print -R "             |--/classes"
     print -R "             |--/lib"
     print -R "             |--/doc"
     print -R "             |--/tmp"
     print ""   
}
assertproject() {
     mkdir -p $PJ/src
     mkdir -p $PJ/classes
     mkdir -p $PJ/lib
     mkdir -p $PJ/doc
     mkdir -p $PJ/tmp
}
makeproject() {
     if [ ! -d "$PJ" ]; then
          confirm "$PJ"
          assertproject
          JF="Main"
          cat $TEMPLATE | gawk -v v=$JF '{sub("NNAME",v,$0);print $0;}' > $Tmp
          cp $Tmp $PJ/src/$JF.java
     fi
}
function cap {
    typeset -u f
    f=${1:0:1}
    printf "%s%s\n" "$f" "${1:1}"
}


PJ=Main
JF=Main
makeproject

# CPATH=$CPATH:lib/joda-time-2.8.1.jar
# CPATH=$CPATH:lib/commons-logging-1.1.3.jar 
CPATH=


figghelp() {
                   print "\n"
                   print "figg - a command line java development environment"
                   print "\n"
                   print "Usage:         figg [-i] [-p] [-l] [-h]"
                   print "               -i [<project-name>/]<class-name>        - enters interactive mode (i-mode)"
                   print "               -p <project-name>                       - select project (project folder)"
                   print "               -l                                      - list project folder"
                   print "               -h                                      - display usage\n"
                   print "Typical uses:  figg                                    - i-mode, project=., class-name == Main>"
                   print "               figg -i <c-name>                        - i-mode, project=., class-name=<c-name>"
                   print "               figg -i <p-name>/<c-name>               - i-mode, project=<p-name>, class-name=<c-name>"
                   print "               figg -p <p-name> -i <c-name>            - i-mode, project=<p-name>, class-name=<c-name>"
                   print "\n"

                   print "Interactive mode commands"
                   print "               f <class-name>    - change the current class" 
                   print "               n <class-name>    - create new file <project-name>/src/<class-name>.java"
                   print "               p <project-name>  - change the current project"
                   print "               np <project-name> - new project (project folder with sub folders)"
                   print "               e                 - edit (vim) <project-name>/src/<class-name>.java"
                   print "               cat               - cat <project-name>/src/<class-name>.java"
                   print "               reset             - deletes all class for the current project"
                   print "               ls                - ls <project-name>/src"
                   print "               c                 - compile <project-name>/src/<class-name>.java"
                   print "               r                 - run <project-name>/classes/<class-name>.class"
                   print "               R                 - run <project-name>/classes/<class-name>.class in split window"
                   print "               j                 - generate and display javadoc <project-name>/classes/<class-name>.java"
                   print "\n"
                   print "               q                 - quit" 
                   print "               h                 - help\n" 
                   projectorgnodetails
}
help() {
                   figghelp
                   print "\$FIGGHOME is $FIGGHOME"
                   print "Current source file is $PJ/src/$JF" 
                   print "Current command line classpath is" 
                   print $CPATH
                   javac -version
                   java -version
                   compile $JF 0
                   run 0 $JF
                   print "\n" 
}
resetmain() {
     JF="Main"
     cat $TEMPLATE | gawk -v v=$JF '{sub("NNAME",v,$0);print $0;}' > $Tmp
     cp $Tmp $PJ/src/$JF.java
}
newproject() {
     if [ ! -d "$PJ" ]; then
          makeproject
     else
          print "Error: Project $PJ already exists (reset to default project and class)"
          JF="Main"
          PJ="Main"
     fi
}
run() {
     assertproject
     print "$JAVAPATH -cp $PJ/classes:$CPATH -ea $2 $3 $4 $5 $6 $7" >&2
     if [[ $1 != "0" ]]; then
          $JAVAPATH -cp $PJ/classes:$CPATH -ea $2 $3 $4 $5 $6 $7
     fi
}
compile() {
     JF=$1
     assertproject
     print "$JAVACPATH $XLINTS -cp $PJ/classes:$CPATH -d $PJ/classes $PJ/src/$JF.java 2> $PJ/tmp/$JF.lst" >&2
     if [[ $2 -gt 0 ]]; then
          rm -f tmp/$JF.lst >/dev/null 2>&1
          $JAVACPATH $XLINTS   -cp $PJ/classes:$CPATH -d $PJ/classes $PJ/src/$JF.java 2> $PJ/tmp/$JF.lst
     fi
}

compileRun() {
     JF=$1
     assertproject
     print "$JAVACPATH $XLINTS -cp $PJ/classes:$CPATH -d $PJ/classes $PJ/src/$JF.java 2> $PJ/tmp/$JF.lst" >&2
     rm -f tmp/$JF.lst >/dev/null 2>&1
     $JAVACPATH $XLINTS   -cp $PJ/classes:$CPATH -d $PJ/classes $PJ/src/$JF.java 2> $PJ/tmp/$JF.lst
     if [[ $? -eq 0 ]]; then
          print "$JAVAPATH -cp $PJ/classes:$CPATH -ea $JF" >&2
          $JAVAPATH -cp $PJ/classes:$CPATH -ea $JF
     fi
}

compileRunList() {
     JF=$1
     assertproject
     cat $PJ/src/$JF.java 2>>$Tmp >>&2
     print "------------------------------------------------------------------------" 2>>$Tmp >>&2
     print "------------------------------------------------------------------------" 2>>$Tmp >>&2
     print "$JAVACPATH $XLINTS -cp $PJ/classes:$CPATH -d $PJ/classes $PJ/src/$JF.java" 2>>$Tmp >>&2
     rm -f tmp/$JF.lst >/dev/null 2>&1
     $JAVACPATH $XLINTS   -cp $PJ/classes:$CPATH -d $PJ/classes $PJ/src/$JF.java 2>>$Tmp >>&2
     print "------------------------------------------------------------------------" 2>>$Tmp >>&2
     print "------------------------------------------------------------------------" 2>>$Tmp >>&2
     if [[ $? -eq 0 ]]; then
          print "$JAVAPATH -cp $PJ/classes:$CPATH -ea $JF" 2>>$Tmp >>&2
          $JAVAPATH -cp $PJ/classes:$CPATH -ea $JF 2>>$Tmp >>&2
     fi
}

compileDebug() {
               JF=$1
               assertproject
               compile $JF 1
               if [[ $? -ne 0 ]]; then
                         print "Listing"
                         # vi src/$JF.java $PJ/tmp/$JF.lst
                         # vim quickfix stuff
                         # :copen " Open the quickfix window
                         # :ccl   " Close it
                         # :cw    " Open it if there are "errors", close it otherwise (some people prefer this)
                         # :cn    " Go to the next error in the window
                         # :cnf   " Go to the first error in the next file
                         vim -c "cw" -c "resize $QFIXWIDTH" -c "map <F1> :cn<cr><cr>" -c "map <F2> :cp<cr><cr>" -q $PJ/tmp/$JF.lst
               else
                    print "Compile OK" >&2
               fi
}
Interactive() {
                while [[ "$cmd" != "q" ]]
                do
                     print -n "figg/$PJ/$JF >> ";read var;set -A arr $var;
                     cmd=${arr[0]};
	             case $cmd in
                                 nc)   cmd="n" ;;
                                 nb)   cmd="b" ;;
                                 sc)   cmd="f" ;;
                                 sp)   cmd="p" ;;
                               edit)   cmd="e" ;;
                              clear)   cmd="reset" ;;
	             esac
	             case $cmd  in
                       x)   cmd="q" ;;
                       tmp) cp $PJ/src/$JF.java  /tmp ;;
                       e)   vim $PJ/src/$JF.java ;;
                       et)  vim $TEMPLATE ;;
                       p)   if [ -d "./${arr[1]}" ]; then
                                 PJ=${arr[1]} 
                            else
                                 print "Error: Project ${arr[1]} does not exist"
                            fi ;;
                       f)   SZ=`echo ${arr[1]} | gawk '{gsub(/[.]java$/,"",$0);print $0;}'`
                            SZ=`cap $SZ`
                            if [[ ! -z "${SZ}" ]]; then
                                 JF=$SZ
                            fi ;;
                       np)  PJ=${arr[1]}
                            if [[ ! -z "${PJ}" ]]; then
                                 newproject 
                                 ls $PJ 
                            fi ;;
                       n)   SZ=`echo ${arr[1]} | gawk '{gsub(/[.]java$/,"",$0);print $0;}'`
                            SZ=`cap $SZ`
                            if [[ ! -z "${SZ}" ]]; then
                                 JF=$SZ
                                 if [ ! -e "$PJ/src/$JF.java" ]; then
                                      cat $TEMPLATE | gawk -v v=$JF '{sub("NNAME",v,$0);print $0;}' > $Tmp
                                      cp $Tmp $PJ/src/$JF.java
                                      vim $PJ/src/$JF.java
                                 else
                                      print "Error: $PJ/src/$JF.java already exists"
                                 fi
                           fi ;;
                  delete)  SZ=`echo ${arr[1]} | gawk '{gsub(/[.]java$/,"",$0);print $0;}'`
                           SZ=`cap $SZ`
                           if [[ ! -z "${SZ}" ]]; then
                                      rm -i  $PJ/src/$SZ.java
                           fi ;;
                       b)  SZ=`echo ${arr[1]} | gawk '{gsub(/[.]java$/,"",$0);print $0;}'`
                           SZ=`cap $SZ`
                           if [[ ! -z "${SZ}" ]]; then
                                JF=$SZ
                                touch $Tmp $PJ/src/$JF.java
                                vim $PJ/src/$JF.java
                           fi ;;
                       c)  compileDebug $JF 1 ;;
                       g)  compileRunList $JF 
                           cat $Tmp 
                          
                           ;;
                       R)  rm -f $Tmp >/dev/null 2>&1
                           run 1 $JF $1 $2 $3 $4 $5 $6 | tee $Tmp
                           vim -c "wincmd w | vert resize $RUNHWIDTH | wincmd w" -O $PJ/src/$JF.java $Tmp
                           ;;
                       r)  run 1 $JF $1 $2 $3 $4 $5 $6 ;;
                       j)  mkdir -p $PJ/doc
                           rm -rf $PJ/doc/*          >/dev/null 2>&1
                           javadoc -d $PJ/doc $PJ/src/*.java
                           ls -lh "$PJ/doc/index.html"
                           xdg-open  "$PJ/doc/index.html" >/dev/null 2>&1
                           ;;
                       d)  vim -o $PJ/tmp/$JF.lst $PJ/src/$JF.java ;;
                       cat) cat $PJ/src/$JF.java ;;
                       resetmain) resetmain ;;
                       y)  print "Compile All"
                           for file in $PJ/src/*.java; do
                               SZ=`echo $file | gawk -F / '{gsub(/[.]java$/,"",$NF);gsub(/^src[/]/,"",$NF);print $NF;}'`
                                print $PJ
                                print $SZ
                                compile $SZ 1
                           done 
                           ;;
                       l)  figg -l ;;
                       archiveall) 
                           DSTAMP=`date '+%F_%H%M%S' | sed 's/-//g'` 
                           tar --exclude=$FIGGHOME/archives -cvf "$FIGGHOME/archives/figghome${DSTAMP}.tar" $FIGGHOME 
                           ls -lh "$FIGGHOME/archives/figghome${DSTAMP}.tar"
                           gzip "$FIGGHOME/archives/figghome${DSTAMP}.tar"
                           ls -lh "$FIGGHOME/archives/figghome${DSTAMP}.tar.gz"
                           uuencode "$FIGGHOME/archives/figghome${DSTAMP}.tar.gz"   \
                                    "$FIGGHOME/archives/figghome${DSTAMP}.tar.gz" > \
                                    "$FIGGHOME/archives/figghome${DSTAMP}.tar.gz.uu.txt"
                           ls -lh "$FIGGHOME/archives/figghome${DSTAMP}.tar.gz.uu.txt"
                           ;;
                       archive) 
                           DSTAMP=`date '+%F_%H%M%S' | sed 's/-//g'` 
                           tar -cvf "$FIGGHOME/archives/${PJ}__${DSTAMP}.tar" $PJ
                           ls -l $FIGGHOME/archives
                           ;;
                       archivels) 
                           ls -l $FIGGHOME/archives ;;
                       pls)  ls -l . ;;
                       ls)   figg -p $PJ -l ;;
                       reset)
                           rm -f $PJ/classes/*.class  >/dev/null 2>&1
                           ;;
                       h) help
                          ;;
                       *) if [ -s src/$cmd.java ]
                          then
                               vim src/$cmd.java 
                          fi
                          ;;
	             esac
                done
}
NOARG="1"
while getopts "hjp:i:lx" arg
do
        NOARG="0"
	case $arg in
            j) figghelp
               ;;
            h) help
               ;;
            p) PJ=$OPTARG
               ;;
            i)  
                # JF=$OPTARG 
                PJ=`echo $OPTARG | gawk -v out="." -F / '/[/]/{out=$1;} END{print out}'`
                JF=`echo $OPTARG | gawk -v out="." -F / '{ if ( $0 ~ /[/]/ ) print $2; else print $1;}'`
                JF=`cap $JF`
                if [ ! -e "$PJ/src/$JF.java" ]; then
                    print "Error: $PJ/src/$JF.java does not exist"
                    exit 1
                fi

                shift $(($OPTIND - 1))
                Interactive

               ;;
            l) 
               print "\n"
               print "Project: "$PJ
               print "=========================================="
               print "\n"
               print $PJ/src
               print "------------------------------------------"
               ls -l $PJ/src
               print "\n"
               print $PJ/classes
               print "------------------------------------------"
               ls -l $PJ/classes
               print "\n"
               date
               compile $JF 0
               run 0 $JF
               print "\n"
               ;;
	    *) exit 0 ;;
	esac
done

if [[ "$NOARG" = "1" ]]; then
     Interactive
fi
